<apex:page id="HRMMapView" controller="MapViewController"
           showHeader="false"  standardStylesheets="false" 
           cache="false" doctype="html-5.0">
<apex:form >
    <apex:actionFunction action="{!RefreshResourceValues}" name="refreshValues"/>
</apex:form>
<html>
    <head>
    	<!-- CSS -->
    	<style  type="text/css">
		    body, html {
		        height: 100%;   
		        width: 100%;
		    }
		    
		    #map_canvas { 
		        width: 100%; 
		        height: 100%; 
		        padding: 0;
		    }
		</style>
		
		<!-- Title -->
        <title>Your Heartrate Monitor</title>
    
        <!-- jQuery, CometD -->
        <apex:includeScript value="{!$Resource.jquery_1_5_1}"/>
        <apex:includeScript value="{!$Resource.json2}"/>
        <apex:includeScript value="{!$Resource.cometd}"/>
        <apex:includeScript value="{!$Resource.jquery_cometd}"/>
        
        <!-- Google Maps -->
        <script type="text/javascript" src="https://maps.google.com/maps/api/js?sensor=true"></script>
      
      	<!-- HRM Viewer -->
        <script>
            var map = null;
            var marker = null;
            var infoWindow = null;
            var hr = {
                endpoint: "{!endpoint}",
                uri: "{!uri}",
                bpm: "{!payload}",
                altitude: "{!altitude}",
                speed: "{!speed}",
                position: new google.maps.LatLng(parseFloat("{!latitude}"),parseFloat("{!longitude}"))
            };
            var hr_prev = {
                endpoint: hr.endpoint,
                uri: hr.uri,
                bpm: hr.bpm,
                altitude: hr.altitude,
                speed: hr.speed,
                position: hr.position
            };
    
            function initGoogleMap() {
                var mapOptions = {
                    center: hr.position,
                    mapTypeId: google.maps.MapTypeId.ROADMAP,
                    zoom: 18,
                };
    
                map = new google.maps.Map($('#map_canvas').get(0), mapOptions);
    
                // Utilize the heartrate custom object
                createMarkerAndInfoWindow(hr.position);
                
            }
        
            function updateCallback(message) {
                // DEBUG
                //console.log("Raw Message: ", message);
                
                // ensure that the message type is of type "update"...
                if(message.data.event.type == 'updated') {
                    var sobj = message.data.sobject;
                    
                    // DEBUG
                    //console.log('Update: ', sobj);
                    
                    // next we have to determine if the update is for the HRM value or the Location... both are observable
                    if (sobj.Name == '/888/0/5850') {
                        // rebuild the HRM variable updating the HRM components 
                        hr = {
                            endpoint: sobj.endpoint_name__c,
                            uri: sobj.Name,
                            bpm: sobj.payload__c,
                            altitude: hr_prev.altitude,
                            speed: hr_prev.speed,
                            position: hr_prev.position
                        };
                        
                        // DEBUG
                        console.log("HRM Update: ",hr);
                        
                        // update the marker
                        updateMarkerAndInfoWindow();
                        
                        // record as previous value
                        hr_prev = {
                            endpoint: hr.endpoint,
                            uri: hr.uri,
                            bpm: hr.bpm,
                            altitude: hr.altitude,
                            speed: hr.speed,
                            position: hr.position
                        };
                   }
                   
                   if (sobj.Name == '/999/0/1234') {
                       // its a location update... first we parse the json
                       var loc = JSON.parse(sobj.payload__c);
                       
                       // DEBUG
                       console.log("Parsed Location:",loc);
                       
                       // next we update the HRM record with the new location 
                       hr = {
                            endpoint: hr_prev.endpoint,
                            uri: hr_prev.uri,
                            bpm: hr_prev.bpm,
                            altitude: loc.msl,
                            speed: loc.speed,
                            position: new google.maps.LatLng(loc.latitude,loc.longitude)
                        };
                        
                        // DEBUG
                        console.log("Location Update: ",hr);
                    
                        // update the map center
                        map.setCenter(hr.position);
                        
                        // set the new position for the marker
                        marker.setPosition(hr.position);
                        
                        // update the marker content
                        updateMarkerAndInfoWindow();
                        
                        // record as previous value
                        hr_prev = {
                            endpoint: hr.endpoint,
                            uri: hr.uri,
                            bpm: hr.bpm,
                            altitude: hr.altitude,
                            speed: hr.speed,
                            position: hr.position
                        };
                   }
                }
            }
        
            $(document).ready(function(){
                // Connect to the CometD endpoint
                $.cometd.init({
                    url: window.location.protocol+'//'+window.location.hostname+'/cometd/28.0/',
                    requestHeaders: { Authorization: 'OAuth {!$Api.Session_ID}'},
                    appendMessageTypeToURL : false
                });
    
                // Subscribe to a topic. JSON-encoded update will be returned in the callback
                $.cometd.subscribe('/topic/GetHRM', updateCallback);
                initGoogleMap();
            });
            
            function metersToFeet(meters) {
            	return (meters*3.28084).toFixed(1);
            }
            
            function metersPerSecToMilesPerHour(meters_per_second) {
            	var mph = (meters_per_second*2.23694).toFixed(1);
            	if (mph < 0.0) return 0;
            	return mph;
            }
    
            function makeContent() {
                return '<div style="font-size:24px"><b>' + hr.endpoint + '</b>' + 
                       '<p>Heart rate:&nbsp&nbsp&nbsp' + hr.bpm + ' bpm</p>' +
                       '<p>Altitude:&nbsp&nbsp&nbsp' + metersToFeet(hr.altitude) + ' ft</p>' +
                       '<p>Speed:&nbsp&nbsp&nbsp' + metersPerSecToMilesPerHour(hr.speed) + ' mph</p></div>';
            }

            function makeTitle() {
                return hr.endpoint + "(" + hr.uri + "): " + Math.round(hr.bpm) + " bpm";
            }
        
            function createMarkerAndInfoWindow(my_position) {
                marker = new google.maps.Marker({
                    position: my_position,
                    title: makeTitle(), 
                    draggable: true,
                    map: map
                });
    
                infoWindow = new google.maps.InfoWindow({
                    content: makeContent()
                });
                
                // callback for hovering over the marker
                google.maps.event.addListener(marker, 'mouseover', function()  {
                    marker.setTitle(makeTitle());
                });
    
                google.maps.event.addListener(marker, 'click', function() {
                    marker.setTitle("My Heartrate Monitor");
                    infoWindow.open(map, marker);
                });

                // Open the info window by default - you can remove this
                // if you just want the marker to be visible when the page
                // loads
                infoWindow.open(map, marker);
            }

            function updateMarkerAndInfoWindow() {
                // set the content and toggle visibility of the marker...
                infoWindow.setContent(makeContent());
                marker.setVisible(false);
                marker.setVisible(true);
            }
        </script>
    </head>
    <body>
        <div id="map_canvas"></div> 
    </body>
</html>
</apex:page>